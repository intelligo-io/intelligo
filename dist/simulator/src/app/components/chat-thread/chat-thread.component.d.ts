import { AfterViewInit, ElementRef, OnInit } from "@angular/core";
import { MatDialog } from "@angular/material";
import { DomSanitizer, SafeUrl } from "@angular/platform-browser";
import * as vm from "../../models/ana-chat-vm.models";
import * as models from "../../models/ana-chat.models";
import * as config from "../../models/ana-config.models";
import { APIService } from "../../services/api.service";
import { ChainDelayService } from "../../services/chain-delay.service";
import { InfoDialogService } from "../../services/info-dialog.service";
import { SimulatorService } from "../../services/simulator.service";
import { StompConnectionStatus, StompService } from "../../services/stomp.service";
export declare class ChatThreadComponent implements OnInit, AfterViewInit {
    private stompService;
    private apiService;
    private dialog;
    private simulator;
    private sanitizer;
    private infoDialog;
    private chainDelayService;
    ngAfterViewInit(): void;
    constructor(stompService: StompService, apiService: APIService, dialog: MatDialog, simulator: SimulatorService, sanitizer: DomSanitizer, infoDialog: InfoDialogService, chainDelayService: ChainDelayService);
    inputContainerRef: ElementRef;
    chatThreadView: ElementRef;
    carouselContainers: ElementRef[];
    chatThread: vm.ChatThreadVM;
    chatInput: vm.ChatInputVM;
    settings: config.AppSettings;
    isMin: boolean;
    isMute: boolean;
    fullScreenImage: string | SafeUrl;
    fullScreenVideo: string | SafeUrl;
    connectionStatusMessage(): "" | "Available" | "Trying to connect..." | "Not available";
    setMin(min: boolean): void;
    carItemWidth: number;
    scrollCarousel(carId: string, direction: string): void;
    canScrollCarousel(carId: string, direction: string): boolean;
    isLastInMessageGroup(msg: vm.ChatMessageVM): boolean;
    isLastMessage(msg: vm.ChatMessageVM): boolean;
    handleCarouselClick(chatMessage: vm.ChatMessageVM, carOption: models.CarouselOption): void;
    insertThreadMessageForCarouselInput(chatMessage: vm.ChatMessageVM): vm.ChatMessageVM;
    fetchingHistory: boolean;
    lastScrollTop: number;
    chatThreadOnScroll(event: UIEvent): void;
    chatTextInputOnFocus(): void;
    textInputFocus(): void;
    loadHistory(next: () => void): void;
    _handleMessageReceivedDelegate: (message: any) => void;
    _sendMessageDelegate: (message: models.ANAChatMessage, threadMsgRef: vm.ChatMessageVM) => void;
    removeConsecutiveErrorsMessage(): void;
    notifyNewMsg(): void;
    openWindow(url: string | SafeUrl): void;
    viewImage(url: string | SafeUrl): void;
    viewVideo(url: string | SafeUrl): void;
    closeImageViewer(): void;
    closeVideoViewer(): void;
    hammerManager: HammerManager;
    destroyHammer(): void;
    setupImageViewerGestures(imgContainer: HTMLDivElement, image: HTMLImageElement): void;
    getStarted(clearThread: boolean, askConfirmation: boolean): void;
    MH: ModelHelpers;
    ngOnInit(): void;
    carouselItemHasMedia(carItem: models.CarouselItem): string;
}
export declare class ModelHelpers {
    Direction: typeof vm.Direction;
    MessageStatus: typeof vm.MessageStatus;
    MessageType: typeof models.MessageType;
    MessageContentType: typeof models.MessageContentType;
    MediaType: typeof models.MediaType;
    InputType: typeof models.InputType;
    StompConnectionStatus: typeof StompConnectionStatus;
}
