import { ElementRef, OnDestroy, OnInit } from "@angular/core";
import { MatDialog, MatSnackBar, MatSnackBarRef, SimpleSnackBar } from "@angular/material";
import { ActivatedRoute, Router } from "@angular/router";
import { Hotkey, HotkeysService } from "angular2-hotkeys";
import * as models from "../../../models/chatflow.models";
import { ChatFlowService } from "../../../services/chatflow.service";
import { DataService } from "../../../services/data.service";
import { GlobalsService } from "../../../services/globals.service";
import { InfoDialogService } from "../../../services/info-dialog.service";
import { LoginService } from "../../../services/login.service";
import { SettingsService } from "../../../services/settings.service";
import { SimulatorService } from "../../../services/simulator.service";
import { SimulatorFrameComponent } from "../simulator-frame/simulator-frame.component";
export declare class ChatFlowComponent implements OnInit, OnDestroy {
    private chatFlowService;
    dialog: MatDialog;
    infoDialog: InfoDialogService;
    route: ActivatedRoute;
    router: Router;
    dataService: DataService;
    private loginService;
    snakbar: MatSnackBar;
    private hotkeys;
    globalsService: GlobalsService;
    simulatorService: SimulatorService;
    settings: SettingsService;
    constructor(chatFlowService: ChatFlowService, dialog: MatDialog, infoDialog: InfoDialogService, route: ActivatedRoute, router: Router, dataService: DataService, loginService: LoginService, snakbar: MatSnackBar, hotkeys: HotkeysService, globalsService: GlobalsService, simulatorService: SimulatorService, settings: SettingsService);
    chatFlowNetwork: ChatFlowNetwork;
    MH: models.ModelHelpers;
    chatflowRoot: ElementRef;
    simulator: SimulatorFrameComponent;
    projName: string;
    ngOnInit(): void;
    ngOnDestroy(): void;
    chatFlowRootSVG(): SVGSVGElement;
    keymapOnDesigner: Hotkey[];
    documentKeyDown(event: KeyboardEvent): void;
    documentKeyUp(event: KeyboardEvent): void;
    ctrlDown: boolean;
    bindDesignerShortcuts(): void;
    unbindDesignerShortcuts(): void;
    deleteSelectedNodes(): void;
    clearSelection(): void;
    cloneSelectedNodes(): void;
    deleteMultipleNodes(nodesVMs: ChatNodeVM[]): void;
    updateLayout(): void;
    updateNodeLayout(chatNodeVM: ChatNodeVM): boolean;
    ngTr(x: number, y: number): string;
    mouseMove(event: MouseEvent): void;
    transformCoordinates(x: number, y: number, event: MouseEvent): DOMPoint;
    _isMouseDown: boolean;
    mouseDown(event: MouseEvent): void;
    mouseUp(event: MouseEvent): void;
    mouseLeave(event: MouseEvent): void;
    _viewBoxWidth: number;
    _viewBoxHeight: number;
    _viewBoxX: number;
    _viewBoxY: number;
    viewBox(): string;
    zoomToRect(x: number, y: number, width: number, height: number): void;
    animationFrameId: number;
    zoomToRectWithAnimation(x: number, y: number, width: number, height: number): void;
    zoomCancel(): void;
    zoomToRectAnimIntermediate(x1: number, y1: number, width1: number, height1: number, x2: number, y2: number, width2: number, height2: number): void;
    tendValue(value: number, tendsTo: number, step: number): number;
    approxEquals(a: number, b: number, approx: number): boolean;
    fitViewToAllNodes(): void;
    fitViewToNodes(chatNodeVMs: ChatNodeVM[]): void;
    designerWheel(event: WheelEvent): void;
    openEditor(chatNodeVM: ChatNodeVM): void;
    addNewNode(): void;
    private resetDraggingState;
    private loadChatFlowPack;
    layoutReady(): boolean;
    initialZoom(): void;
    saveChatFlow(): models.ChatFlowPack;
    exportChatFlow(): void;
    playChatFlow(): void;
    openPublishDialog(): void;
    gotoStartup(): void;
}
declare class ChatFlowNetwork {
    parent: ChatFlowComponent;
    infoDialog: InfoDialogService;
    snackbar: MatSnackBar;
    constructor(parent: ChatFlowComponent, infoDialog: InfoDialogService, snackbar: MatSnackBar);
    updateChatNodeConnections(): void;
    chatNodeConnections: ChatNodeConnection[];
    chatNodeVMs: ChatNodeVM[];
    chatFlowPack: models.ChatFlowPack;
    selectedNodes(): ChatNodeVM[];
    newChatNodeConnection: ChatNodeNewConnection;
    draggingChatNode: ChatNodeVM;
    draggingChatNodeOffset: Point;
    selectedNodeOffsets: {
        [nodeId: string]: Point;
    };
    clickConnectionStartButton: ChatButtonConnector;
    clickConnectionStartSnackbar: MatSnackBarRef<SimpleSnackBar>;
}
declare class ChatNodeConnection {
    srcButtonConnector: ChatButtonConnector;
    destChatNodeVM: ChatNodeVM;
    infoDialog: InfoDialogService;
    constructor(srcButtonConnector: ChatButtonConnector, destChatNodeVM: ChatNodeVM, infoDialog: InfoDialogService);
    srcConnectorX(): number;
    srcConnectorY(): number;
    destConnectorX(): number;
    destConnectorY(): number;
    calcTangentOffset(pt1X: number, pt2X: number): number;
    calcSrcTangentX(): number;
    calcSrcTangentY(): number;
    calcDestTangentX(): number;
    calcDestTangentY(): number;
    path(): string;
    closeButtonVisible: boolean;
    closeButtonPointX: number;
    closeButtonPointY: number;
    mouseEnter(event: MouseEvent): void;
    circleRadius: number;
    pathWidth: number;
    remove(event: MouseEvent): void;
}
declare class ChatNodeNewConnection {
    srcButtonConnector: ChatButtonConnector;
    destX: number;
    destY: number;
    isHidden: boolean;
    canConnect: boolean;
    srcConnectorX(): number;
    srcConnectorY(): number;
    calcTangentOffset(pt1X: number, pt2X: number): number;
    calcSrcTangentX(): number;
    calcSrcTangentY(): number;
    calcDestTangentX(): number;
    calcDestTangentY(): number;
    path(): string;
    circleRadius: number;
}
declare class ChatButtonConnector {
    chatNodeVM: ChatNodeVM;
    button: models.Button;
    snackbar: MatSnackBar;
    constructor(chatNodeVM: ChatNodeVM, button: models.Button, snackbar: MatSnackBar);
    x(): number;
    y(): number;
    circleRadius: number;
    mouseDown(event: MouseEvent): void;
    btnIndex(): number;
    setButtonNextNodeId(nextNodeId: string): void;
    startDirectConnection(event: MouseEvent): void;
    isConnected(): boolean;
}
export declare class ChatNodeVM {
    network: ChatFlowNetwork;
    chatNode: models.ChatNode;
    snackbar: MatSnackBar;
    constructor(network: ChatFlowNetwork, chatNode: models.ChatNode, snackbar: MatSnackBar);
    _layoutUpdated: boolean;
    _x: number;
    _y: number;
    _btnTableWidth: number;
    _width: number;
    width(): number;
    _height: number;
    height(): number;
    x(): number;
    y(): number;
    cornerRadius: number;
    headerHeight: number;
    mouseDown(event: MouseEvent): void;
    mouseUp(event: MouseEvent): void;
    mouseEnter(event: MouseEvent): void;
    mouseLeave(event: MouseEvent): void;
    chatButtonConnectors(): ChatButtonConnector[];
    nodeConnectorY(): number;
    nodeConnectorX(): number;
    clickConnectionActive(): ChatButtonConnector;
    nodeClick(): void;
    circleRadius: number;
    isSelected: boolean;
    toggleSelection(): void;
    isNodeEmpty(): boolean;
}
declare class Point {
    x: number;
    y: number;
    constructor(x: number, y: number);
}
export {};
