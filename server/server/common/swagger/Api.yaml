swagger: '2.0'
info:
  version: 1.0.0
  title: API for Chatbots.mn 
  description: API for Chatbots.mn
basePath: /api/v1
tags:
  - name: Chatbots.mn Auth
    description: Security Login for JWT Generation
  - name: Chatbots.mn Analytics
    description: Chatbots.mn Analytics API
  - name: Chatbots.mn BotStudio
    description: Chatbots.mn BotStudio API
  - name: Chatbots.mn Marketplace
    description: Chatbots.mn Marketplace API
  - name: Chatbots.mn Integrations
    description: ChatBot integrates with the following apps API
consumes:
  - application/json
produces:
  - application/json
schemes:
  - http
  - https
securityDefinitions:
  Bearer:
    description: |
      For accessing the API a valid JWT token must be passed in all the queries in
      the 'Authorization' header.


      A valid JWT token is generated by the API and retourned as answer of a call
      to the route /login giving a valid user & password.


      The following syntax must be used in the 'Authorization' header :

          Bearer xxxxxx.yyyyyyy.zzzzzz
    type: apiKey
    name: Authorization
    in: header
definitions:
  PublishedProductsBody:
    type: object
    title: published products
    required:
      - name
      - data
    properties:
      name:
        type: string
        description: Product List Name
      data:
        type: array
        items:
          $ref: '#/definitions/publish'
  publish:
    type: object
    title: published products
    required:
      - id
      - url
      - buildId
      - buildStatus
      - scrapeDate   
    properties:
      id:
        type: string
        description: publish name
      url:
        type: string
        description: build url
      buildStatus:
        type: string
        description: build status
        enum: [inprogress, successful, failure, notstarted]
      buildId:
        type: string
        description: build id
      scrapeDate:
        type: string
        description: date scraped
        format: date-time
      publishStartDate:
        type: string
        description: publish start date 
        format: date-time
      publishEndDate:
        type: string
        description: publish end date
        format: date-time
  ProductsBody:
    type: object
    title: products
    required:
      - name
      - data
    properties:
      name:
        type: string
        description: Product List Name
      data:
        type: array
        items:
          $ref: '#/definitions/product'
      country:
        type: string
        description: campaign country
      theme:
        type: object
        title: Page Theme
        properties:
          page:
            type: object
            title: page theme
            properties:
              backgroundImage: 
                type: string
                description: background Image
              background:
                type: string
                description: background color
      visibility:
        type: object
        title: page visibility details
        properties:
          startDate:
            type: string
            description: page start date
            format: date-time
          endDate:
            type: string
            description: page end date
            format: date-time
  product:
    type: object
    title: scraped product
    required:
      - title
      - salePrice
      - brand
      - availability
      - vnv
      - brandUrl
      - image
    properties:
      title:
        type: string
        description: product name
      salePrice:
        type: string
        description: sale price        
      brand:
        type: string
        description: brand name
      availability:
        type: string
        description: availability
      vnv:
        type: string
        description: veg / non veg
      brandUrl:
        type: string
        description: brand url
      image:
        type: string
        description: base64 Image string
      features:
        type: array
        items:
          $ref: '#/definitions/productFeature'
      images:
        type: array
        items:
          $ref: '#/definitions/productImage'
  productFeature:
    type: object
    title: feature line
    required:
      - feature
    properties:
      feature:
        type: string
        description: feature line
  productImage:
    type: object
    title: image details
    required:
      - url
    properties:
      url:
        type: string
        description: image url                     
  LoginBody:
    type: object
    title: user login
    required:
      - email
      - password
      - role
    properties:
      email:
        type: string
        description: The user email
      password:
        type: string
        description: The user password
      role:
        type: string
        description: User Role
        enum:
          - admin
          - guest
  RegisterBody:
    type: object
    title: user register
    required:
      - email
      - password
      - role
      - name
    properties:
      name:
        type: string
        description: The user name
      email:
        type: string
        description: The user email
      password:
        type: string
        description: The user password
      role:
        type: string
        description: User Role
        enum:
          - admin
          - guest
  Token:
    type: object
    properties:
      idToken:
        type: string
      expiresIn:
        type: string

paths:
  /auth/login:
    post:
      tags:
        - Chatbots.mn Auth
      description: |
        Login to get JWT Token for API Access
      responses:
        '200':
          description: Returns valid JWT Token
          schema:
            $ref: '#/definitions/Token'
        '401':
          description: Unauthorized user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: used credentials
          required: true
          schema:
            $ref: '#/definitions/LoginBody'
  /auth/register:
    post:
      tags:
        - Chatbots.mn Auth
      description: |
        Register to user 
      responses:
        '200':
          description: Returns valid 
        '401':
          description: Unauthorized user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: used user info
          required: true
          schema:
            $ref: '#/definitions/RegisterBody'
  /shop/products:
    get:
      tags:
        - Chatbots.mn Marketplace
      description: Fetch all examples
      responses:
        200:
          description: Returns all examples
  /shop/products/{id}:
    get:
      tags:
        - Chatbots.mn Marketplace
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the entity to retrieve
          type: integer
      responses:
        200:
          description: Return the example with the specified id
        404:
          description: Example not available
  /shop/productOptions:
    get:
      tags:
        - Chatbots.mn Marketplace
      description: Fetch all examples
      responses:
        200:
          description: Returns all examples
  /shop/productOptions/{id}:
    get:
      tags:
        - Chatbots.mn Marketplace
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the entity to retrieve
          type: integer
      responses:
        200:
          description: Return the example with the specified id
        404:
          description: Example not available
  /shop/prices:
    get:
      tags:
        - Chatbots.mn Marketplace
      description: Fetch all examples
      responses:
        200:
          description: Returns all examples
  /shop/prices/{id}:
    get:
      tags:
        - Chatbots.mn Marketplace
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the entity to retrieve
          type: integer
      responses:
        200:
          description: Return the example with the specified id
        404:
          description: Example not available
  /shop/inventory:
    get:
      tags:
        - Chatbots.mn Marketplace
      description: Fetch all examples
      responses:
        200:
          description: Returns all examples
  /shop/inventory/{id}:
    get:
      tags:
        - Chatbots.mn Marketplace
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the entity to retrieve
          type: integer
      responses:
        200:
          description: Return the example with the specified id
        404:
          description: Example not available
  /shop/priceByOptionId/{id}:
    get:
      tags:
        - Chatbots.mn Marketplace
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the entity to retrieve
          type: integer
      responses:
        200:  
          description: Return the example with the specified id
        404:
          description: Example not available
  